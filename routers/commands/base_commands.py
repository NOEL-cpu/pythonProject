import random
import string
import time

from PIL import Image
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.utils import markdown

from keyboards.common_keyboards import (
    ButtonText,
    get_on_start_kb,
    get_on_help_kb,
    get_actions_kb,
)
from keyboards.inline_keyboards.info_kb import build_info_kb

from googletrans import Translator

import PutToDir

from RebusCouch2 import RebusImageProcessor

router = Router(name=__name__)

Sesions={}

@router.message(CommandStart())
async def handle_start(message: types.Message):
    # –∏–¥–∏–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/flashCardsStart"),
             KeyboardButton(text="/ShowMyProgress")]
        ],
        resize_keyboard=True  # –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        text=f"Hello, {message.from_user.full_name}!",
        reply_markup=keyboard
    )


@router.message(Command("help"))
async def handle_help(message: types.Message):
    text = "I'm an echo bot.\nSend me any message!"
    await message.answer(text=text)

@router.message(Command("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"))
async def handle_traning(message: types.Message):
    await message.answer(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    path = 'C:\\Users\\AdminX\\PycharmProjects\\pythonProject\\folder'
    result_image_path = "D:\\7 Photo\\DDs-bot\\4.png"
    rebus_processor = RebusImageProcessor(path, result_image_path)
    Sesions[message.from_user.id]=rebus_processor #–ø–µ—Ä–µ–¥–∞–ª–∏ –æ–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É
    # user_query = text11 —Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–æ–≤–æ, –Ω–∞–±–æ—Ä –±—É–¥–µ—Ç
    rebus_processor.process_hint(1)

    await message.answer(text="–í—ã–±–∏—Ä–∞—é")
    await message.answer(text="–Ø –¥—É–º–∞—é")
    # collect_images_main = collect_images(path)
    photo1 = FSInputFile('D:\\7 Photo\\DDs-bot\\4.png')
    time.sleep(5)
    await message.answer(text="–Ø –ø–æ–¥—É–º–∞–ª")
    await message.answer_photo(photo=photo1)
    await message.answer(text="–µ—Å–ª–∏ –≤—ã –Ω–µ —Ä–∞–∑–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ —Ç–æ")


@router.message(Command("–ø–æ–¥—Å–∫–∞–∑–∫–∞"))
async def resume_traning(message: types.message):
    await message.answer(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
    path = 'C:\\Users\\AdminX\\PycharmProjects\\pythonProject\\folder'
    result_image_path = "D:\\7 Photo\\DDs-bot\\result.jpg"
    user_try = 0
    rebus_processor2=Sesions[message.from_user.id] # –ø–æ–ª—É—á–∏–ª–∏  –æ–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
    
    rebus_processor2.process_hint(user_query="2")
    await message.answer(text="–Ø –¥—É–º–∞—é")
    photo1 = FSInputFile('D:\\7 Photo\\DDs-bot\\4.png')
    await message.answer_photo(photo=photo1)

    # —Å–µ—Ä—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è(—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –æ–±–µ–∫—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ...info.txt


    # while True:
    #     if user_try >= 4:
    #         break
    #     user_try = + 1
    #     rebus_processor2.process_hint(1)
    #     photo2 = FSInputFile('D:\\7 Photo\\DDs-bot\\result.jpg')
    #     await message.answer_photo(photo=photo2)

@router.message(Command("–ö–æ–Ω–µ—Ü"))
async def handle_traning(message: types.Message):
     await message.answer(text="—è —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
     rebus_processor_end=Sesions[message.from_user.id]
     rebus_processor_end.__del__()



@router.message(Command("more", prefix="!/"))
async def handle_more(message: types.Message):
    markup = get_actions_kb()
    await message.answer(
        text="Choose action:",
        reply_markup=markup,
    )

@router.message(Command("more", prefix="!/"))
async def handle_more(message: types.Message):
    markup = get_actions_kb()
    await message.answer(
        text="Choose action:",
        reply_markup=markup,
    )


@router.message(Command("flashCardsStart"))
async def handle_info_command(message: types.Message):
    markup = build_info_kb()
    #1 –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ–µ –≤—ã–≤—ã–≤–æ–¥, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ
    await message.answer(
        text="–°—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—á–∏–µ —Ä–µ—Å—É—Ä—Å—ã:",
        reply_markup=markup,
    )

@router.message()
async def echo_message(message: types.Message):
    await message.answer(text="I am start")
    try:

        text11 = message.text
        await message.answer(text11)
        # Trenning
        await message.answer(text="1")


        # –ë–ª–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
        translator = Translator()
        translator_word = translator.translate(text11, src='en', dest='ru').text
        await message.answer(translator_word)
        # print(text11, translator_word)

        # –†–∞—Å–∫–ª–∞–¥–∫–∞ —Å–ª–æ–≤–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —Å–ª–æ–≤–∞
        pathOfpictureForSendUser, InfoTxt = PutToDir.alfabet(text11)
        print(pathOfpictureForSendUser)

        if pathOfpictureForSendUser != 'NOTPicture':
            photo22 = FSInputFile(pathOfpictureForSendUser)
          #  photo22 = 'D:/7 Photo/DDs-bot/1.jpg'
            await message.answer_photo( photo=photo22)

        await message.reply(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ = " + str(InfoTxt))

    except ValueError as exc:
        print(exc.with_traceback())
        print('–ò—Å–∫–ª Value erorr1 (–ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç)')

    except TypeError as exc:
        print('–û—Ç—Ä–∞–±–æ—Ç–∞–ª exeption 70 str', exc.with_traceback())
        await message.reply(text="Something new üôÇ")

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        base_url = "C://Users//AdminX//PycharmProjects//pythonProject//folder//bankOfPictures//"
        length = 8  # –î–ª–∏–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        letters_and_digits = string.ascii_letters + string.digits
        random_string = ''.join(random.choice(letters_and_digits) for i in range(length))
        random_filename = random_string + ".jpg"
        new_url = base_url + random_filename
        print(new_url)

    except ValueError as exc2:
        print('–ò—Å–∫–ª Value erorr2 (–ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞)')


